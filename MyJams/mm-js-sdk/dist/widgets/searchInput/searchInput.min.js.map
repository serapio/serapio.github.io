{"version":3,"sources":["searchInput.js"],"names":["containerElement","textElement","inputElement","messageElement","warningElement","MindMeldSearchInput","window","errorMessages","not-allowed","service-not-allowed","no-speech","speech-not-supported","initialize","element","querySelector","addEventListener","setFinal","e","keyCode","blur","text","getText","setText","emit","preventDefault","focus","classList","add","remove","contains","clearAllMessage","console","log","warningMessage","document","createElement","setAttribute","appendChild","warningButtonContainer","warningButton","innerHTML","isFinal","textContent","replace","trim","getErrorMessage","error","showPromptMessage","showErrorMessage","clearPromptMessage","showWarningMessage","click","subscriptions","on","eventName","callback","context","subscription","push","subscribers","undefined","args","Array","prototype","slice","call","arguments","forEach","this","apply"],"mappings":"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","file":"searchInput.min.js","sourcesContent":["/* exported MindMeldSearchInput */\n\n;(function searchInput () {\n  'use strict';\n\n  var MindMeldSearchInput = window.MindMeldSearchInput = window.MindMeldSearchInput || {};\n\n  var containerElement;\n  var textElement;\n  var inputElement;\n  var messageElement;\n  var warningElement;\n\n  var errorMessages = {\n    'not-allowed': 'Microphone access was denied. Please grant access and try again.',\n    'service-not-allowed': 'Microphone access was denied. Please grant access and try again.',\n    'no-speech': 'We did not hear you. Please try again.',\n    'speech-not-supported': 'This browser does not support speech recognition'\n  };\n\n\n  /**\n   * Initialize the search element.  Pass in the DOM (not jQuery) element\n   * that contains the search input.  In the provided html snippet, it would be\n   * `document.querySelector('.mindmeld-search')`.\n   */\n  MindMeldSearchInput.initialize = function initialize (element) {\n    containerElement = element;\n    textElement = containerElement.querySelector('.mindmeld-search-text');\n    inputElement = containerElement.querySelector('.mindmeld-search-input');\n    messageElement = containerElement.querySelector('.mindmeld-message');\n    warningElement = containerElement.querySelector('.mindmeld-warning');\n\n    textElement.addEventListener('focus', function() {\n      MindMeldSearchInput.setFinal(false);\n    });\n\n    textElement.addEventListener('keypress', function (e) {\n      // We are looking for CR (keyCode 13)\n      var keyCode = e.keyCode;\n      if (keyCode !== 13) {\n        return;\n      }\n\n      // User pressed return\n      textElement.blur();\n      var text = MindMeldSearchInput.getText();\n      MindMeldSearchInput.setText(text, true);\n      MindMeldSearchInput.emit('submitText', text);\n\n      e.preventDefault();\n    });\n\n    textElement.addEventListener('click', function (e) {\n      //We want to focus on the span inside.\n      textElement.querySelector('span').focus();\n    });\n\n    textElement.addEventListener('focusin', function (e) {\n      textElement.classList.add('editing');\n    });\n\n    textElement.addEventListener('focusout', function (e) {\n      textElement.classList.remove('editing');\n    });\n\n    messageElement && messageElement.addEventListener('click', function (e) {\n      if (inputElement.classList.contains('prompt')) {\n        return;\n      }\n      MindMeldSearchInput.clearAllMessage();\n      textElement.querySelector('span').focus();\n    });\n\n    containerElement.querySelector('.mindmeld-search-glass').addEventListener('click',\n      function (e) {\n        console.log('Clicking glass');\n        MindMeldSearchInput.setFinal(true);\n        var text = MindMeldSearchInput.getText();\n        MindMeldSearchInput.emit('submitText', text);\n\n        return false;\n      }\n    );\n\n    var warningMessage = document.createElement('p');\n    warningMessage.setAttribute('id', 'warning-message');\n    warningElement && warningElement.appendChild(warningMessage);\n    var warningButtonContainer = document.createElement('div');\n    warningButtonContainer.setAttribute('id', 'close-warning');\n    var warningButton = document.createElement('a');\n    warningButton.setAttribute('id', 'close-warning-button');\n    warningButtonContainer.appendChild(warningButton);\n    warningElement && warningElement.appendChild(warningButtonContainer);\n    warningMessage.innerHTML = 'Your browser does not support speech input. Try using a&nbsp;<a id=\"supported-browser-link\" href=\"http://caniuse.com/web-speech\" target=\"_blank\">supported browser.</a>';\n\n    MindMeldSearchInput.emit('init');\n  };\n\n  /**\n   * Set whether the search text is considered finalized or not.\n   * Non-final text is de-emphasized.\n   */\n  MindMeldSearchInput.setFinal = function setFinal (isFinal) {\n    if (isFinal) {\n      textElement.classList.remove('interim');\n    } else {\n      textElement.classList.add('interim');\n    }\n  };\n\n  /**\n   * Get the text of the search input.\n   */\n  MindMeldSearchInput.getText = function getText () {\n    var text = textElement.querySelector('span').textContent;\n    // contentEditable divs encode spaces as '&nbsp;'\n    text = text.replace(/&nbsp;/g, ' ');\n    if (text.trim) text = text.trim();\n    return text;\n  };\n\n  /**\n   * Sets the text of the search input. Use isFinal boolean to\n   * indicate whether the text is finalized or not\n   */\n  MindMeldSearchInput.setText = function setText (text, isFinal) {\n    MindMeldSearchInput.setFinal(isFinal);\n    textElement.querySelector('span').innerHTML = text;\n  };\n\n  /**\n   * Get the error message when given an error name.\n   */\n  MindMeldSearchInput.getErrorMessage = function getErrorMessage (error) {\n    return errorMessages[error];\n  };\n\n  MindMeldSearchInput.showPromptMessage = function showPromptMessage() {\n    MindMeldSearchInput.setText('', true);\n    inputElement.classList.remove('error');\n    inputElement.classList.add('prompt');\n    if (messageElement) {\n      messageElement.innerHTML = 'Start speaking now...';\n    }\n  };\n\n  MindMeldSearchInput.showErrorMessage = function showErrorMessage(text) {\n    MindMeldSearchInput.setText('', true);\n    inputElement.classList.remove('prompt');\n    inputElement.classList.add('error');\n    if (messageElement) {\n      messageElement.innerHTML = text;\n    }\n  };\n\n  MindMeldSearchInput.clearPromptMessage = function clearPromptMessage() {\n    inputElement.classList.remove('prompt');\n  };\n\n  MindMeldSearchInput.clearAllMessage = function clearAllMessage() {\n    inputElement.classList.remove('prompt');\n    inputElement.classList.remove('error');\n  };\n\n  MindMeldSearchInput.showWarningMessage = function showWarningMessage() {\n    // Show a warning message\n    containerElement.classList.add('no-speech');\n    containerElement.classList.add('warning');\n    textElement.click();\n\n    warningElement && warningElement.querySelector('a#close-warning-button').addEventListener('click', function (e) {\n      containerElement.classList.remove('warning');\n      textElement.click();\n    });\n  };\n\n  // Event Dispatcher\n  var subscriptions = {};\n\n  /**\n  * Subscribe to search input events\n  */\n  MindMeldSearchInput.on = function on (eventName, callback, context) {\n    if (! subscriptions[eventName]) {\n      subscriptions[eventName] = [];\n    }\n    var subscription = {\n      callback: callback,\n      context: context\n    };\n    subscriptions[eventName].push(subscription);\n  };\n\n  /**\n  * Publish microphone events to subscribers\n  */\n  MindMeldSearchInput.emit = function emit (eventName /*, args...*/) {\n    var subscribers = subscriptions[eventName];\n    if (subscribers !== undefined) {\n      var args = Array.prototype.slice.call(arguments, 1);\n      subscribers.forEach(\n        function invokeCallback (subscription) {\n          var context = subscription.context || this;\n          subscription.callback.apply(context , args);\n        }\n      );\n    }\n  };\n}());\n"],"sourceRoot":"/source/"}