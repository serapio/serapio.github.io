{"version":3,"sources":["volumeMonitor.js"],"names":["window","navigator","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","AudioContext","webkitAudioContext","Uint8Array","VolumeMonitor","config","this","listener","onError","onVolumeChange","onStop","stream","context","analyzer","frequencies","times","audioStarted","prototype","start","microphoneReady","self","stream_source","createMediaStreamSource","connect","loop","pending","listening","getByteFrequencyData","getByteTimeDomainData","getVolume","setTimeout","stop","parseInt","getFrequencyRange","frequencyBinCount","from","to","volume","i","createAnalyser","smoothingTimeConstant","fftSize","audio","err"],"mappings":"CAGA,WACI,YAEAA,QAAOC,UAAUC,aAAgBF,OAAOC,UAAUC,cAC9CF,OAAOC,UAAUE,oBACjBH,OAAOC,UAAUG,iBACjBJ,OAAOC,UAAUI,cACrB,IAAIC,GAAeN,OAAOM,cAAgBN,OAAOO,mBAC7CC,EAAaR,OAAOQ,WAEpBC,EAAgB,SAAUC,GAC1BC,KAAKC,SAAWF,EAAOE,SACvBD,KAAKE,QAAUH,EAAOG,QACtBF,KAAKG,eAAiBJ,EAAOI,eAC7BH,KAAKI,OAASL,EAAOK,OAErBJ,KAAKK,OAAS,KACdL,KAAKM,QAAU,KACfN,KAAKO,SAAW,KAChBP,KAAKQ,YAAc,KACnBR,KAAKS,MAAQ,KACbT,KAAKU,cAAe,EAGxBZ,GAAca,UAAUC,MAAQ,WAsB5B,QAASC,GAAiBR,GACtBS,EAAKT,OAASA,CACd,IAAIU,GAAgBD,EAAKR,QAAQU,wBAAwBX,EACzDU,GAAcE,QAAQH,EAAKP,UAC3BW,IAGJ,QAASA,KACL,MAAMJ,GAAKb,SAASkB,SAAWL,EAAKb,SAASmB,WAK7CN,EAAKP,SAASc,qBAAqBP,EAAKN,aACxCM,EAAKP,SAASe,sBAAsBR,EAAKL,OAEzCK,EAAKX,gBAAkBW,EAAKX,eAAeoB,KAE3ClC,OAAOmC,WAAWN,EAAM,IALxBJ,SAJIA,EAAKW,OACL,QAWR,QAASF,KACL,MAAOlC,QAAOqC,SAASC,EAAkB,EAAGb,EAAKP,SAASqB,kBAAoB,GAAI,IAGtF,QAASD,GAAmBE,EAAMC,GAG9B,IAAK,GAFDC,GAAS,EAEJC,EAAIH,EAAUC,EAAJE,EAAQA,IACvBD,GAAUjB,EAAKN,YAAYwB,EAG/B,OAAOD,IAAWD,EAAKD,GArD3B,GAAIf,GAAOd,IAENA,MAAKU,aAeNQ,KAdAlB,KAAKM,QAAUN,KAAKM,SAAW,GAAIX,GACnCK,KAAKO,SAAWP,KAAKM,QAAQ2B,iBAC7BjC,KAAKO,SAAS2B,sBAAwB,IACtClC,KAAKO,SAAS4B,QAAU,IAExBnC,KAAKQ,YAAc,GAAIX,GAAWG,KAAKO,SAASqB,mBAChD5B,KAAKS,MAAQ,GAAIZ,GAAWG,KAAKO,SAASqB,mBAE1CvC,OAAOC,UAAUC,cAAe6C,OAAO,GAAQvB,EAAiB,SAAUwB,GACtEvB,EAAKZ,QAAQ,iCAAmCmC,KAGpDrC,KAAKU,cAAe,IA0C5BZ,EAAca,UAAUc,KAAO,WAC3BzB,KAAKI,QAAUJ,KAAKI,SAEpBJ,KAAKK,QAAUL,KAAKK,OAAOoB,OAC3BzB,KAAKU,cAAe,GAGxBrB,OAAOS,cAAgBA","file":"volumeMonitor.min.js","sourcesContent":["/* exported VolumeMonitor */\n// Volume Monitor\n\n(function volumeMonitor () {\n    'use strict';\n\n    window.navigator.getUserMedia = (window.navigator.getUserMedia ||\n        window.navigator.webkitGetUserMedia ||\n        window.navigator.mozGetUserMedia ||\n        window.navigator.msGetUserMedia);\n    var AudioContext = window.AudioContext || window.webkitAudioContext;\n    var Uint8Array = window.Uint8Array;\n\n    var VolumeMonitor = function (config) {\n        this.listener = config.listener;\n        this.onError = config.onError;\n        this.onVolumeChange = config.onVolumeChange;\n        this.onStop = config.onStop;\n\n        this.stream = null;\n        this.context = null;\n        this.analyzer = null;\n        this.frequencies = null;\n        this.times = null;\n        this.audioStarted = false;\n    };\n\n    VolumeMonitor.prototype.start = function () {\n        var self = this;\n\n        if (!this.audioStarted) {\n            this.context = this.context || new AudioContext();\n            this.analyzer = this.context.createAnalyser();\n            this.analyzer.smoothingTimeConstant = 0.18;\n            this.analyzer.fftSize = 256;\n\n            this.frequencies = new Uint8Array(this.analyzer.frequencyBinCount);\n            this.times = new Uint8Array(this.analyzer.frequencyBinCount);\n\n            window.navigator.getUserMedia({ audio: true }, microphoneReady, function (err) {\n                self.onError('The following error occurred: ' + err);\n            });\n\n            this.audioStarted = true;\n        } else {\n            loop();\n        }\n\n\n        function microphoneReady (stream) {\n            self.stream = stream;\n            var stream_source = self.context.createMediaStreamSource(stream);\n            stream_source.connect(self.analyzer);\n            loop();\n        }\n\n        function loop () {\n            if (!(self.listener.pending || self.listener.listening)) {\n                self.stop();\n                return;\n            }\n\n            self.analyzer.getByteFrequencyData(self.frequencies);\n            self.analyzer.getByteTimeDomainData(self.times);\n\n            self.onVolumeChange && self.onVolumeChange(getVolume());\n\n            window.setTimeout(loop, 75);\n        }\n\n        function getVolume () {\n            return window.parseInt(getFrequencyRange(0, self.analyzer.frequencyBinCount - 1), 10);\n        }\n\n        function getFrequencyRange (from, to) {\n            var volume = 0;\n\n            for (var i = from; i < to; i++) {\n                volume += self.frequencies[i];\n            }\n\n            return volume / ( to - from );\n        }\n    };\n\n    VolumeMonitor.prototype.stop = function () {\n        this.onStop && this.onStop();\n        // stop recording\n        this.stream && this.stream.stop();\n        this.audioStarted = false;\n    };\n\n    window.VolumeMonitor = VolumeMonitor;\n\n})();\n"],"sourceRoot":"/source/"}