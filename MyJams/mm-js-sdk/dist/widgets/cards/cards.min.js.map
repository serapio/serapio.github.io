{"version":3,"sources":["cards.js"],"names":["Handlebars","$","Spinner","rowWidth","lastCardWidth","spinner","options","render","templateUrl","templateData","Error","tmplCache","templateString","ajax","url","method","async","success","data","compile","helpers","handlebarsHelpers","placeCardInDom","$card","index","$cards","cardSelector","length","parentSelector","append","insertBefore","calculateCardScreenPosition","existingCardSizes","cardLeft","cardTop","parentWidth","width","cardWidth","outerWidth","cardHeight","outerHeight","id","height","numCardsInRow","Math","max","floor","i","top","left","layoutCard","BASE_Z_INDEX","css","position","attr","transition","opacity","animationDuration","MindMeldCards","initialize","_options","window","resize","layoutCards","$msg","setCards","cards","onClick","console","log","removeClass","forEach","card","documentid","$newCard","templatePath","replaceWith","imagesLoaded","find","on","e","addClass","$domCards","this","remove","each","cardElt","setLoading","isLoading","toggleClass","spin","stop","jQuery"],"mappings":"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","file":"cards.min.js","sourcesContent":["/* global Handlebars, jQuery, Spinner */\n/* exported MindMeldCards */\n\n;(function (Handlebars, $, Spinner) {\n\n  // options for initialization\n  var options = {};\n  // Store how wide a row of cards is, to intelligently resize on window resize events.\n  var rowWidth, lastCardWidth;\n  // Spinner for loading\n  var spinner;\n\n  // Thanks koorchik, from http://stackoverflow.com/questions/8366733/external-template-in-underscore\n  var render = function(templateUrl, templateData) {\n    if ( !templateUrl ) {\n      throw new Error('render got invalid templateUrl: ' + templateUrl + '; aborting.');\n    }\n\n    if ( !render.tmplCache ) {\n      render.tmplCache = {};\n    }\n\n    if ( ! render.tmplCache[templateUrl] ) {\n      var templateString;\n      $.ajax({\n        url: templateUrl,\n        method: 'GET',\n        async: false,\n        success: function(data) {\n          templateString = data;\n        }\n      });\n\n      render.tmplCache[templateUrl] = Handlebars.compile(templateString);\n    }\n\n    return render.tmplCache[templateUrl](templateData, {helpers: options.handlebarsHelpers});\n  };\n\n  /*\n   * Place the card as the index-th child of #cards\n   * This affects the DOM only; not the visual order\n   */\n  var placeCardInDom = function ($card, index) {\n    var $cards = $(options.cardSelector);\n    if ($cards.length <= index) {\n      $(options.parentSelector).append($card);\n    } else {\n      $card.insertBefore($cards[index]);\n    }\n  };\n\n  /*\n   * Calculates the screen position for the card.\n   * Cards are placed left to right, top to bottom.\n   */\n  var calculateCardScreenPosition = function ($card, index, existingCardSizes) {\n    var parentWidth = $(options.parentSelector).width();\n    var cardWidth = $card.outerWidth(true);\n    var cardHeight = $card.outerHeight(true);\n    var cardLeft, cardTop;\n\n    // Store this for layout of successive elements\n    existingCardSizes[$card[0].id] = {\n      height: cardHeight,\n      width: cardWidth\n    };\n\n    var numCardsInRow = Math.max( 1, Math.floor(parentWidth / cardWidth) );\n    // Store this for resize events.\n    rowWidth = numCardsInRow*cardWidth;\n    lastCardWidth = cardWidth;\n\n    if ( cardWidth > parentWidth ) {\n      // Corner case; just stack the cards vertically\n      cardLeft = 0;\n      cardTop = index*cardHeight;\n    } else {\n      // Normal case; stack them left to right, top to bottom\n      cardLeft = (index % numCardsInRow)*cardWidth;\n      cardTop = 0;\n      if (index >= numCardsInRow) {\n        var $cards = $(options.cardSelector);\n        for (var i = (index % numCardsInRow); i < index; i += numCardsInRow) {\n          cardTop += existingCardSizes[$cards[i].id].height;\n        }\n      }\n\n    }\n\n    return { top: cardTop, left: cardLeft };\n  };\n\n  /*\n   * Layout a single card, given the index and previous card sizes.\n   */\n  var layoutCard = function ($card, index, existingCardSizes) {\n    // Set the z-index so that cards cleanly move over one another.\n    // This applies to their pre-animation index\n    var BASE_Z_INDEX = 50;\n    $card.css('z-index', BASE_Z_INDEX - index);\n\n    var position = calculateCardScreenPosition($card, index, existingCardSizes);\n    if ( $card.attr('new') ) {\n      $card.attr('new', null);\n      $card.css('left', position.left + 'px');\n      $card.css('top', position.top + 'px');\n\n      // Replace with desired entry animation\n      $card.transition({opacity: 1}, options.animationDuration);\n    } else {\n      // Existing card, just move it\n      $card.transition({\n        left: position.left,\n        top: position.top,\n      }, options.animationDuration);\n    }\n  };\n\n  var MindMeldCards = {\n\n    /**\n     * Initialize the cards widget with provided options.\n     *\n     * options: {\n     *   templatePath: (String) path to Handlebars template for the card.\n     *   handlebarsHelpers: ({name:function}) Object of helpers for Handlebars rendering.\n     *   parentSelector: (String) jQuery selector for parent element of cards, eg '#cards'.\n     *     This element must have a non-zero width.\n     *   cardSelector: (String) jQuery selector for the cards, eg '.card'.\n     *   animationDuration: (Number) Duration (in ms) for the animations.  Default 500.\n     * }\n     */\n    initialize: function (_options) {\n      options = _options;\n      if ( !('animationDuration' in options) ) {\n        options.animationDuration = 500;\n      }\n\n      //Re-layout cards on window size change.\n      $(window).resize(function () {\n        if (\n            $(options.parentSelector).width() < rowWidth ||\n            $(options.parentSelector).width() >= rowWidth + lastCardWidth\n          ) {\n          // parent is too small to hold existing row, or big enough to hold another card\n          //console.log('Parent has significantly reized; re-layout cards');\n          MindMeldCards.layoutCards();\n        }\n      });\n\n      var $msg = $('<div>', {id: 'no-result-message'});\n      $(options.parentSelector).append($msg);\n    },\n\n    /**\n     * cards: [{title, }, ...]\n     * onClick: function(event) called onClick, with event.data = {card:card}.\n     *   Like jQuery, return false to override default click behaviour.\n     */\n    setCards: function (cards, onClick) {\n      console.log('Appending cards', cards);\n      $(options.parentSelector).removeClass('no-result');\n\n      // First set the DOM correctly\n      cards.forEach( function (card, i) {\n        var $card = $('#' + card.documentid);\n\n        if ($card.length) {\n          // Existing card; We need to replace it with new data and place correctly.\n          var $newCard = $( render( options.templatePath, card ) );\n          $newCard.css('left', $card.css('left'));\n          $newCard.css('top', $card.css('top'));\n          $card.replaceWith($newCard);\n\n          $newCard.imagesLoaded( function () {\n            $newCard.find('.not-loaded').removeClass('not-loaded');\n          });\n          placeCardInDom($newCard, i);\n        } else {\n          // New card; render and place in DOM\n          $card = $( render( options.templatePath, card ) );\n\n          $card.css('opacity', 0);\n          $card.attr('new', true);\n          $card.on('click', { card: card }, function (e) {\n            $(options.cardSelector).removeClass('selected');\n            $card.addClass('selected');\n            return onClick(e);\n          });\n\n          $card.imagesLoaded( function () {\n            $card.find('.not-loaded').removeClass('not-loaded');\n          });\n          placeCardInDom($card, i);\n        }\n      });\n      // Delete the old cards still in the DOM.  They will all be at the end.\n      var $domCards = $(options.cardSelector);\n      for (var i = cards.length; i < $domCards.length; i++) {\n        // Our removal animation.  Modify to taste, but make sure to remove the element\n        // Also, tell jshint that we're making a function in a loop safely.\n        /* jshint -W083 */\n        $($domCards[i]).transition({opacity: 0}, options.animationDuration, function onComplete () { $(this).remove(); });\n        /* jshint +W083 */\n      }\n\n      // Now layout the cards\n      MindMeldCards.layoutCards();\n      // Need to triger another layout when the images are loaded, because the\n      // image sizes may have changed\n      $(options.cardSelector).imagesLoaded( function () {\n        MindMeldCards.layoutCards();\n      });\n\n      // If no cards are returned, display \"No results\" message\n      if (cards.length === 0) {\n        $(options.parentSelector).addClass('no-result');\n      }\n    },\n\n    /**\n     * Layout the cards that are in the DOM.\n     * This is generally only used internally, but if you need to\n     * re-layout due to parent div size change, you can call it.\n     * It should be idempotent.\n     */\n    layoutCards: function () {\n      // Keep track of the sizes of cards, to know where to place the next one.\n      // Map from documentid to {height:, width:}\n      var existingCardSizes = {};\n\n      $(options.cardSelector).each(function (index, cardElt) {\n        layoutCard( $(cardElt), index, existingCardSizes );\n      });\n\n    },\n\n    /**\n     * Set the cards to a loading state.  Should be set to true when new results\n     * are expected (eg, when a getDocuments request is sent to the API).  It's\n     * the caller's responsibility to set it to false when everything is done.\n     */\n    setLoading: function(isLoading) {\n      $(options.parentSelector).toggleClass('loading', isLoading);\n      if (isLoading) {\n        // Spin the spinner\n        if (spinner) {\n          spinner.spin($(options.parentSelector)[0]);\n        } else if (Spinner) {\n          // If we don't have a Spinner, just don't show the animation\n          spinner = new Spinner({\n            length: 60,\n            width: 15,\n            top: '200px'\n          }).spin($(options.parentSelector)[0]);\n        }\n      } else {\n        // Hide the spinner\n        spinner && spinner.stop();\n      }\n    }\n\n  };\n\n  window.MindMeldCards = MindMeldCards;\n\n})(Handlebars, jQuery, Spinner);\n"],"sourceRoot":"/source/"}